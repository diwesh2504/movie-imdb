{"version":3,"sources":["logo.svg","Pages/MainPage.js","Pages/EnterPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MainPage","React","useState","details","setDetails","id_display","setIdDisplay","view","setView","display","e","a","preventDefault","fetch","then","res","json","data","prevData","concat","err","console","log","displayById","value","document","getElementById","prev","All","map","entry","_id","name","year","director","cast","One","className","htmlFor","type","id","placeholder","onClick","scope","EnterPage","handleSubmit","method","body","JSON","stringify","headers","catch","onSubmit","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.cdf1ee90.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nfunction MainPage(){\r\n    \r\n    const [details,setDetails]=React.useState([]);\r\n    const[id_display,setIdDisplay]=React.useState({});\r\n    const[view,setView]=React.useState(\"one\");\r\n    const display=async (e)=>{\r\n        setView(\"all\");\r\n        e.preventDefault();\r\n        try{\r\n        fetch(\"http://localhost:4040/show\")\r\n        .then(res=>res.json())\r\n        .then(data=>setDetails(prevData=>prevData.concat(data)));\r\n        }catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n    const displayById=async(e)=>{\r\n        setView(\"one\");\r\n        e.preventDefault();\r\n        let value=document.getElementById(\"movieid\").value;\r\n        console.log(value);\r\n        try{\r\n            fetch(`http://localhost:4040/show/${value}`)\r\n            .then(res=>res.json())\r\n            .then(data=>{setIdDisplay(prev=>data);console.log(\"da\",data)});\r\n            }catch(err){\r\n                console.log(err);\r\n            }\r\n    }\r\n    const All=()=>{\r\n        \r\n        return(\r\n            details.map(entry=>{\r\n                return(\r\n                    <tr>\r\n                    <td>{entry._id}</td>\r\n                    <td>{entry.name}</td>\r\n                    <td>{entry.year}</td>\r\n                    <td>{entry.director}</td>\r\n                    <td>{entry.cast}</td>\r\n                    </tr>\r\n                )\r\n            })\r\n        )\r\n    }\r\n    const One=()=>{\r\n        \r\n        return(\r\n            <tr>\r\n                    <td>{id_display._id}</td>\r\n                    <td>{id_display.name}</td>\r\n                    <td>{id_display.year}</td>\r\n                    <td>{id_display.director}</td>\r\n                    <td>{id_display.cast}</td>\r\n             </tr>\r\n        )\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n            <form >\r\n                <div className=\"m-2\">\r\n                    <label htmlFor=\"Movie ID..\">Enter ID:</label>\r\n                    <input type=\"text\" id=\"movieid\" placeholder=\"Enter Movie ID.\" className=\"ml-2 \"/>\r\n                    <span><button type=\"submit\" className=\"btn btn-secondary ml-2 btn-sm\" onClick={(e)=>displayById(e)}>Search</button></span>\r\n                </div>\r\n            </form>\r\n            <h1>OR</h1>\r\n            <button className=\"btn btn-primary\" onClick={(e)=>display(e)}>Display all</button>\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">ID</th>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th scope=\"col\">Year Released</th>\r\n                        <th scope=\"col\">Director</th>\r\n                        <th scope=\"col\">Cast</th>\r\n                     </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {view===\"all\"?<All/>:<One/>}\r\n                   \r\n                </tbody>\r\n            </table>\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default MainPage;","import React from 'react';\r\nfunction EnterPage(){\r\n    const handleSubmit=async (e)=>{\r\n        e.preventDefault();\r\n        \r\n        fetch(\"http://localhost:4040/post\",{\r\n            method:\"POST\",\r\n            body:JSON.stringify({\r\n                name:document.getElementById(\"name\").value,\r\n                director:document.getElementById(\"director\").value,\r\n                year:document.getElementById(\"year\").value,\r\n                id:document.getElementById(\"id-movie\").value,\r\n                cast:document.getElementById(\"cast\").value\r\n            }),\r\n            headers: { \r\n                \"Content-type\": \"application/json; charset=UTF-8\"\r\n            } \r\n        }).then(res=>res.json())\r\n        .catch(err=>console.log(err))\r\n    }\r\n    return(\r\n        <>\r\n        <div className=\"jumbotron\">\r\n           <h1>Enter Movie Details</h1> \r\n        </div>\r\n        <div className=\"row\">\r\n            <div className=\"col-2\"></div>\r\n            <div className=\"col\">\r\n            <form onSubmit={(e)=>handleSubmit(e)}>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"name\">Name</label>\r\n                    <input type=\"text\" className=\"form-control\" id=\"name\" placeholder=\"Movie Name..\"/>\r\n               </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"director\">Director</label>\r\n                    <input type=\"text\" className=\"form-control\" id=\"director\" placeholder=\"Directed By..\"/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"year\">Year Released</label>\r\n                    <input type=\"text\" className=\"form-control\" id=\"year\" placeholder=\"\"/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"id-movie\">ID</label>\r\n                    <input type=\"text\" className=\"form-control\" id=\"id-movie\" placeholder=\"Movie ID\"/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"cast\">Cast</label>\r\n                    <input type=\"text\" className=\"form-control\" id=\"cast\" placeholder=\"Actors..\"/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    \r\n                    <input type=\"submit\" className=\"btn btn-primary \" id=\"submit\" />\r\n                </div>\r\n            </form>\r\n\r\n            </div>\r\n            <div className=\"col\"></div>\r\n        </div>\r\n        </>\r\n    )\r\n\r\n}\r\nexport default EnterPage;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MainPage from './Pages/MainPage';\nimport EnterPage from './Pages/EnterPage'\nimport {BrowserRouter as Router,Switch,Route} from 'react-router-dom'\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact component={MainPage}/>\n        <Route path=\"/data\" exact component={EnterPage}/>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}